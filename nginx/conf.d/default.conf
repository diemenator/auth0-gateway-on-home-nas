lua_shared_dict discovery 1m;
lua_shared_dict jwks 1m;

server {
	error_log /dev/stdout debug;
    access_log /dev/stdout;

	listen 80;
	server_name ${SERVER_NAME};

	location / {
		return 301 https://$host$request_uri;
	}
}


server {
    error_log /dev/stdout debug;
    access_log /dev/stdout;

	listen 443 ssl;
	http2 on;
	server_name ${SERVER_NAME};


	ssl_certificate /etc/nginx/certs/cert.pem;
	ssl_certificate_key /etc/nginx/certs/key.pem;
	ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;



	# Define a DNS Resolver (use local network gateway)
	resolver ${DNS_RESOLVER} valid=300s ipv6=off valid=300s;
	resolver_timeout 5s;

	location / {
		access_by_lua_block {
			local openidc = require("resty.openidc")

			local opts = {
				redirect_uri = "https://" .. os.getenv("AUTH0_PROTECTED_DOMAIN") .. "/callback",
				discovery = "https://" .. os.getenv("AUTH0_DOMAIN") .. "/.well-known/openid-configuration",
				client_id = os.getenv("AUTH0_CLIENT_ID"),
				client_secret = os.getenv("AUTH0_CLIENT_SECRET"),
				scope = "openid profile email",
				discovery_cache = ngx.shared.discovery,  -- Nginx shared memory cache
				jwks_cache = ngx.shared.jwks,            -- JWKS keys cache
			}

			-- Authenticate using OpenIDC
			local res, err = openidc.authenticate(opts)

			if err then
				ngx.log(ngx.ERR, "OIDC authentication failed: ", err)
				return ngx.exit(ngx.HTTP_UNAUTHORIZED)
			end

			-- Set user headers for downstream services
			ngx.req.set_header("X-USER", res.id_token.sub)
			ngx.req.set_header("X-EMAIL", res.id_token.email or "unknown")
		}

		proxy_pass ${PROXY_TARGET};
	}

	location = /callback {
		access_by_lua_block {
			ngx.log(ngx.ERR, "someone authed!")
			local openidc = require("resty.openidc")

			local opts = {
				redirect_uri = "https://" .. os.getenv("AUTH0_PROTECTED_DOMAIN") .. "/callback",
				discovery = "https://" .. os.getenv("AUTH0_DOMAIN") .. "/.well-known/openid-configuration",
				client_id = os.getenv("AUTH0_CLIENT_ID"),
                client_secret = os.getenv("AUTH0_CLIENT_SECRET"),
				scope = "openid profile email",
				discovery_cache = ngx.shared.discovery,  -- Use Nginx shared memory cache
				jwks_cache = ngx.shared.jwks,            -- Cache JWKS keys
			}

			-- Exchange the `code` for an access token
			local res, err = openidc.authenticate(opts)

			if err then
				ngx.log(ngx.ERR, "OIDC callback failed: ", err)
				return ngx.exit(ngx.HTTP_UNAUTHORIZED)
			end

			-- Store session by setting a secure HTTP cookie
			local session = require("resty.session").start()
			session.data.id_token = res.id_token
			session.data.access_token = res.access_token
			session:save()

			-- Extract the original URL from `state`
			local redirect_target = ngx.var.arg_state or "/"

			ngx.log(ngx.ERR, "Auth successful! Redirecting user to: " .. redirect_target)

			-- Redirect back to the original page
			return ngx.redirect(redirect_target)
		}
	}
}
